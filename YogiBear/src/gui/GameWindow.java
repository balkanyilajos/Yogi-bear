package gui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import sql.*;
import util.Direction;

/**
 * Main page
 *
 * @author Balk√°nyi Lajos
 */
public class GameWindow extends javax.swing.JFrame {
    private static final String MAPS_PATH[]
            = {"src/data/map/1.txt"/*, "src/data/map/2.txt", "src/data/map/3.txt", "src/data/map/4.txt",
                "src/data/map/5.txt", "src/data/map/6.txt", "src/data/map/7.txt", "src/data/map/8.txt",
                "src/data/map/9.txt", "src/data/map/10.txt"*/};
    private int mapsPathCounter;
    private final HighScores score;
    private int life;
    private int totalPoints;

    private final int width;
    private final int height;
    
    private final Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
    private final Timer timer;
    private double second;
    private boolean delay;
    private final ScheduledExecutorService executor;
    private long startTime;
    
    private Direction playerDirection;

    /**
     * Creates new form GameWindow
     */
    public GameWindow(int life, int width, int height) throws SQLException {
        this.score = new HighScores(10);
        this.mapsPathCounter = 0;
        this.totalPoints = 0;
        this.second = 0;
        this.width = width;
        this.height = height;
        this.life = life;
        this.delay = false;
        initComponents();
        this.timer = createTimer();
        playerDirection = new Direction();
        boardPanel.initVariables(MAPS_PATH[mapsPathCounter], width - 10, height - 95, playerDirection);
        timer.start();
        executor = Executors.newSingleThreadScheduledExecutor();
        startTime = System.nanoTime();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardPanel = new gui.BoardPanel();
        textPanel = new javax.swing.JPanel();
        lifeText = new javax.swing.JLabel();
        totalPointsText = new javax.swing.JLabel();
        timerText = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        newGameMenuItem = new javax.swing.JMenuItem();
        scoreMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Yogi Bear");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation((int) ((dimension.getWidth() - this.width) / 2), (int) ((dimension.getHeight() - this.height) / 2));
        setMinimumSize(new Dimension(this.width, this.height));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        boardPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(boardPanel, java.awt.BorderLayout.CENTER);

        textPanel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        lifeText.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lifeText.setText("Health: " + this.life);
        lifeText.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 20, 0, 20));
        textPanel.add(lifeText);

        totalPointsText.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        totalPointsText.setText("Total points: " + this.totalPoints);
        totalPointsText.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 20, 0, 20));
        textPanel.add(totalPointsText);

        timerText.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        timerText.setText(String.format("%02d", (int)(second / 60)) + ":" + String.format("%02d", (int) (second % 60)) );
        timerText.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 20, 0, 20));
        textPanel.add(timerText);

        getContentPane().add(textPanel, java.awt.BorderLayout.PAGE_START);

        gameMenu.setText("game");

        newGameMenuItem.setText("new game");
        newGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(newGameMenuItem);

        scoreMenuItem.setText("top 10 score");
        scoreMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(scoreMenuItem);

        menuBar.add(gameMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuItemActionPerformed
        try {
            new GameWindow(3, 800, 800);
        } catch (SQLException e) {
            System.out.println(e);
        }
        dispose();
        timer.stop();
        executor.shutdown();

    }//GEN-LAST:event_newGameMenuItemActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        /*
        if (delay) {
            return;
        }*/
        playerDirection.setDirectionWithPressedKeyboardCode(evt.getKeyCode());
    }//GEN-LAST:event_formKeyPressed

    private void scoreMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreMenuItemActionPerformed
        try {
            String top10 = "";
            ArrayList<HighScore> best = score.getHighScores();
            for (int i = 0; i < best.size(); i++) {
                top10 += i + 1 + ". helyezett: " + best.get(i) + "\n";
            }
            JOptionPane.showMessageDialog(null, top10);
        } catch (SQLException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_scoreMenuItemActionPerformed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        playerDirection.setDirectionWithReleasedKeyboardCode(evt.getKeyCode());
    }//GEN-LAST:event_formKeyReleased

    private Timer createTimer() {
        return new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                second = (System.nanoTime() - startTime) / 1000000000;
                timerText.setText("Time: " + this);

                if (life <= 0) {
                    String name = JOptionPane.showInputDialog(null, "Game Over! What is your name? ");
                    try {
                        if (name == null || name.equals("")) {
                            name = "<unknown>";
                        }
                        score.putHighScore(name, totalPoints + boardPanel.getPoints());
                    } catch (SQLException e) {
                        System.out.println(e);
                    }
                    delay = true;
                    timer.stop();
                    executor.shutdown();
                } else if (boardPanel.wasPlayerInside()) {
                    life = life - 1;
                    boardPanel.initVariables(MAPS_PATH[mapsPathCounter], width - 10, height - 95, playerDirection);
                    delay = true;
                    executor.schedule(() -> delay = false, 1, TimeUnit.SECONDS);
                } else if (boardPanel.isEndOfMap()) {
                    if (MAPS_PATH.length > mapsPathCounter + 1) {
                        totalPoints += boardPanel.getPoints();
                        boardPanel.initVariables(MAPS_PATH[++mapsPathCounter], width - 10, height - 95, playerDirection);
                        delay = true;
                        executor.schedule(() -> delay = false, 1, TimeUnit.SECONDS);
                    } else {
                        String name = JOptionPane.showInputDialog(null, "Woow, you won! What is your name? ");
                        if (name != null) {
                            name = (name.equals("")) ? "<unknown>" : name;
                        }

                        try {
                            score.putHighScore(name, totalPoints);
                        } catch (SQLException e) {
                            System.out.println(e);
                        }

                        delay = true;
                        timer.stop();
                        executor.shutdown();
                    }
                } else {
                    lifeText.setText("Life: " + life);
                    totalPointsText.setText("Total points: " + (totalPoints + boardPanel.getPoints()));
                    //boardPanel.moveMovableFigures();
                }

                textPanel.repaint();
                boardPanel.repaint();
            }

            @Override
            public String toString() {
                return String.format("%02d", (int) (second / 60)) + ":" + String.format("%02d", (int) (second % 60));
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gui.BoardPanel boardPanel;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JLabel lifeText;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JMenuItem scoreMenuItem;
    private javax.swing.JPanel textPanel;
    private javax.swing.JLabel timerText;
    private javax.swing.JLabel totalPointsText;
    // End of variables declaration//GEN-END:variables
}
